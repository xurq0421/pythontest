#coding=utf-8

import requests
from baseData import BaseData
import logging
import os
from sqldb import sql_db
import time
import json


logPath = os.path.dirname(os.path.realpath(__file__)) + '\\LAS.log'
file = open(logPath,encoding='utf-8',mode='a')
logging.basicConfig(level=logging.INFO,stream=file,format='%(asctime)s-%(levelname)s-%(message)s')

# log_format = "%(asctime)s-%(levelname)s-%(message)s"
# logging.basicConfig(filename="LAS.log",level=logging.INFO,format=log_format)

class LASInterface():
    header = {"version": "2.0", "source": "ios", "device": "FBC915C8-A13B-44D2-A1D0-E64E70E0F858", "aversion": "4.0.0.12", "Content-Type": "application/json"}

    image_base64 = ""

    def __init__(self,las_url,businessType):
        print("start")
        self.las_url = las_url
        bd = BaseData()
        self.phone = bd.getPhone()
        logging.info('手机号：' + self.phone)
        self.name = bd.getName()
        logging.info('姓名：' + self.name)
        self.idCard = bd.getId()
        logging.info('身份证号：' + self.idCard)
        self.cardNo = bd.getCardNo('622298',16) #参数：卡bin和卡号长度
        logging.info('银行卡号：' + self.cardNo)
        self.businessType = businessType
        logging.info('该业务品种为：' + self.businessType)

    #修改征信报告
    def modifyInnerCreditLog(self,report_id,environment,system):
        print('modifyInnerCredit')
        db = sql_db()
        time1 = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime())
        time2 = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime())
        sql = "update credit_log set name='%s',cert_id='%s',create_date='%s',create_time='%s' where id='%s'" % (self.name,self.idCard,time1,time2,report_id)
        db.getDBConfig(environment,system)
        db.InnerModifyCredit(sql)

    def selectDBdata(self):
        db = sql_db()
        db.getDBConfig('SIT01','las')
        amountId = 'A25475044230576582'
        sql ="SELECT * from l_quota_info where amount_id = '%s'" %amountId
        print(sql)
        result = db.selectDBdata(sql)



    #注册前获取验证码
    def getSmsCode(self):
        print('getSmsCode')
        getSmsCode_path = self.las_url + '/las/basic/verify/getSmsCode'
        getSmsCodedata = {"mobile": self.phone,"type": "1","operation": "reg"}
        try:
            response_data = requests.post(url=getSmsCode_path,data=json.dumps(getSmsCodedata),headers=self.header)
            response_data_dic = json.loads(response_data.text)
            if (not response_data.text or response_data_dic['retCode'] != '000000'):
                raise Exception(logging.info('获取验证码失败，返回日志为：' + response_data.text))
            else:
                logging.info('获取验证码成功，返回日志为：' + response_data.text)
        except Exception as e:
            logging.info(e)

    #注册
    def toRegister(self):
        toRegister_path = self.las_url + '/las/user/register/toRegister'
        toRegister_data = {"mobile":self.phone,"password": "a1234567",	"verify": "123456","longitude": "","latitude": ""}
        try:
            register_data = requests.post(url=toRegister_path,data=json.dumps(toRegister_data),headers=self.header)
            register_data_dic = json.loads(register_data.text)
            if (not register_data.text or register_data_dic['retCode'] != '000000'):
                raise Exception(logging.info('注册失败，返回日志为：') + register_data.text)
            else:
                logging.info('注册成功，返回日志为：' + register_data.text)
        except Exception as e:
            logging.info('exception')

    #登录
    def toLogin(self):
        toLogin_path = self.las_url + '/las/user/login/toLogin'
        toLogin_data = {"mobile": self.phone,"password": "a1234567",	"longitude": "","latitude": ""}
        try:
            login_rep_data = requests.post(url=toLogin_path,data=json.dumps(toLogin_data),headers=self.header)
            login_data_dic = json.loads(login_rep_data.text)
            if (not login_rep_data.text or login_data_dic['retCode'] != '000000'):
                raise Exception(logging.info('登录失败，日志返回：') + login_rep_data.text)
            else:
                self.userId = login_data_dic['data']['userId']
                self.token = login_data_dic['data']['token']
                logging.info('登录成功，日志返回：' + login_rep_data.text)
        except Exception as e:
            logging.info(e)

    #从登录接口返回值获取token
    def getHeader2(self):
        header2 = {"version": "2.0", "source": "ios", "device": "FBC915C8-A13B-44D2-A1D0-E64E70E0F858","aversion": "3.1.0","Content-Type": "application/json", "token": self.token}
        return header2

    #填写邀请码
    def inviteCode(self,inviteCode):
        header_invite = self.getHeader2()
        print(header_invite)
        inviteCode_path = self.las_url + '/las/facility/inviteCodeVerify'
        invite_data = {"inviteCode": inviteCode,"type": "0"}
        try:
            invite_respone = requests.post(url=inviteCode_path,data=json.dumps(invite_data),headers=header_invite)
            invite_res_dic = json.loads(invite_respone.text)
            if (not invite_respone.text or invite_res_dic['retCode'] != '000000'):
                raise Exception(logging.info('邀请码填写错误，日志返回：') + invite_respone.text)
            else:
                logging.info('邀请码填写成功，日志返回：' + invite_respone.text)
        except Exception as e:
            logging.info(e)

    # 获取进件城市信息
    def getData(self):
        print('getData')
        address = {"YJKD": {"addC": "440300", "addD": "440305", "addP": "440000", "company": "深圳市南山区自动测试有限公司",
                            "comAddP": "440000", "comAddC": "440300", "comAddD": "440305", "ioffice": "深圳市公安局南山分局"},
                   "MiaoDai": {"addC": "370100", "addD": "370112", "addP": "370000", "company": "济南市测试一责任有限公司",
                               "comAddP": "370000", "comAddC": "370100", "comAddD": "370112",
                               "ioffice": "济南市公安局历城分局"}}
        self.city = address[self.businessType]['addC']
        self.province = address[self.businessType]['addP']
        self.adds = address[self.businessType]['addD']
        self.company = address[self.businessType]['company']
        self.ioffice = address[self.businessType]['ioffice']
        if self.city == '440300':
            logging.info('该业务进件城市为深圳')
        else:
            logging.info('该业务进件城市为济南')

    #保存客户基本信息(无保单)
    def saveInfo_noIusr(self):
        saveInfo_path = self.las_url + '/las/facility/saveInfo'
        saveInfo_data = {"addC":self.city,"addD":self.adds,"addP":self.province,"workType":"1","hasHouse":"2","company":self.company,
                         "comAddP":self.province
            ,"comAddC":self.city,"comAddD":self.adds,"hasCar":"1","hasInsur":"0","addStreet":"华侨城创意文化园",
                         "addDoor":"3号楼503室","comAddStreet":"讯美科技广场2座",
                         "comAddDoor":"13楼","insurInfo":[]}
        save_header = self.getHeader2()
        try:
            saveInfo_res = requests.post(url=saveInfo_path,data=json.dumps(saveInfo_data,headers=save_header))
            saveInfo_resDic = json.loads(saveInfo_res.text)
            if (not saveInfo_res.text or saveInfo_res['retCode'] != '000000'):
                raise Exception(logging.info('（无保单）客户基本信息保存失败，返回日志为：') + saveInfo_res.text)
            else:
                logging.info('（无保单）客户基本信息保存成功，返回日志为：' + saveInfo_res.text)
        except Exception as e:
            logging.info(e)

    #保存客户基本信息(有保单)
    def saveInfo_iusr(self):
        saveInfo_path = self.las_url + '/las/facility/saveInfo'
        saveInfo_data = {"addC": self.city, "addD": self.adds, "addP": self.province, "workType": "1", "hasHouse": "2", "company": self.company,
                         "comAddP": self.province
            , "comAddC": self.city, "comAddD": self.adds, "hasCar": "1", "hasInsur": "0", "addStreet": "华侨城创意文化园",
                         "addDoor": "3号楼503室", "comAddStreet": "讯美科技广场2座",
                         "comAddDoor": "13楼", "insurInfo": [{"insurNumber": "8000", "insurType": "120"}]}
        save_header = self.getHeader2()
        try:
            saveInfo_res = requests.post(url=saveInfo_path, data=json.dumps(saveInfo_data, headers=save_header))
            saveInfo_resDic = json.loads(saveInfo_res.text)
            if (not saveInfo_res.text or saveInfo_res['retCode'] != '000000'):
                raise Exception(logging.info('（有保单）客户基本信息保存失败，返回日志为：') + saveInfo_res.text)
            else:
                logging.info('（有保单）客户基本信息保存成功，返回日志为：' + saveInfo_res.text)
        except Exception as e:
            logging.info(e)

    #校验虚拟城市签发机关
    def validAuthority(self):
        validAuthority_path = self.las_url + '/las/facility/validAuthority'
        valid_data = {"ioffice": self.ioffice}
        try:
            valid_res = requests.post(url=validAuthority_path,data=json.dumps(valid_data),headers=self.getHeader2())
            valid_res_dic = json.loads(valid_res.text)
            if (not valid_res.text or valid_res_dic['retCode'] != '000000'):
                raise Exception(logging.info('虚拟城市签发机关校验失败，返回日志为：') + valid_res.text)
            else:
                logging.info('虚拟城市签发机关校验成功，返回日志为：' + valid_res.text)
        except Exception as e:
            logging.info(e)



    #上传身份证认证信息
    def saveIndenInfo(self):
        saveIndenInfo_path = self.las_url + '/las/facility/saveIndenInfo'
        saveIndenInfo_data = {"iname": self.name,
                            "inumber": self.idCard,
                            "ioffice": self.ioffice,
                            "istart": "2016-01-25",
                            "iend": "2036-01-25",
                            "iavatar": self.image_base64,
                            "iaddress": "湖南省邵阳县五峰铺银白田村下尤铺组17号",
                            "iregion": "汉",
                            "ipicFront": self.image_base64,
                            "ipicBack": self.image_base64
                             }
        try:
            saveIndenInfo_res = requests.post(url=saveIndenInfo_path,data=json.dumps(saveIndenInfo_data),headers=self.getHeader2())
            saveIndenInfo_dic = json.loads(saveIndenInfo_res.text)
            if (not saveIndenInfo_res.text or saveIndenInfo_dic['retCode'] != '000000'):
                raise Exception(logging.info('上传身份证认证信息失败，返回日志为：') + saveIndenInfo_res.text)
            else:
                logging.info('上传身份证认证信息成功，返回日志为：' + saveIndenInfo_res.text)
        except Exception as e:
            logging.info(e)

    #上传活体检测
    def verifyPhoto(self):
        verifyPhoto_path = self.las_url + '/las/facility/verifyPhoto'
        verify_data = {"sface": self.image_base64}
        try:
            verifiy_res = requests.post(url=verifyPhoto_path,data=json.dumps(verify_data),headers=self.getHeader2())
            verifiy_dic = json.loads(verifiy_res.text)
            if (not verifiy_res.text or verifiy_dic['retCode'] != '000000'):
                raise Exception(logging.info('上传活体检测失败，返回日志为：') + verifiy_res.text)
            else:
                logging.info('上传活体检测成功' + verifiy_res.text)
        except Exception as e:
            logging.info(e)


    #查询云贷用户是否已有征信报告
    def findCredit(self):
        findCredit_path = self.las_url + '/las/facility/customer/findCredit'
        try:
            findCredit_resp = requests.post(url=findCredit_path,headers=self.getHeader2())
            findCredit_dic = json.loads(findCredit_resp.text)
            if not findCredit_resp.text:
                raise Exception(logging.info('征信报告查询失败，返回日志为：') + findCredit_resp.text)
            elif findCredit_dic['retCode'] != '000000':
                logging.info('没有征信报告，跳转验证银行卡页面，返回日志为：' + findCredit_resp.text)
            else:
                logging.info('已有征信报告，正在计算额度，返回日志为：' + findCredit_resp.text)
        except Exception as e:
            logging.info(e)